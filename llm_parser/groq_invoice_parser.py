import os
import json
from openai import OpenAI
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
load_dotenv()

# Kh·ªüi t·∫°o client cho Groq API (OpenAI-style)
client = OpenAI(
    api_key=os.getenv("GROQ_API_KEY"),
    base_url="https://api.groq.com/openai/v1"
)

DEFAULT_MODEL = "llama3-8b-8192"

def parse_invoice_with_groq(ocr_text: str,
                            model: str = DEFAULT_MODEL) -> list[dict] | None:
    """
    G·ª≠i n·ªôi dung h√≥a ƒë∆°n OCR t·ªõi LLM ƒë·ªÉ tr√≠ch xu·∫•t b·∫£ng d·ªØ li·ªáu d·∫°ng JSON.
    K·∫øt qu·∫£ tr·∫£ v·ªÅ l√† list[dict] g·ªìm c√°c d√≤ng h√≥a ƒë∆°n.
    """

    system_prompt = (
        "B·∫°n l√† tr·ª£ l√Ω k·∫ø to√°n th√¥ng minh. VƒÉn b·∫£n d∆∞·ªõi ƒë√¢y l√† n·ªôi dung t·ª´ h√≥a ƒë∆°n b√°n h√†ng, "
        "ƒë∆∞·ª£c t·∫°o t·ª´ OCR n√™n c√≥ th·ªÉ b·ªã l·ªói xu·ªëng d√≤ng ho·∫∑c thi·∫øu ƒë·ªãnh d·∫°ng.\n\n"
        "Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr√≠ch xu·∫•t ch√≠nh x√°c **c√°c d√≤ng h√†ng h√≥a** trong h√≥a ƒë∆°n th√†nh m·ªôt m·∫£ng JSON chu·∫©n, "
        "m·ªói ph·∫ßn t·ª≠ l√† m·ªôt d√≤ng h√†ng g·ªìm c√°c tr∆∞·ªùng:\n"
        "- \"ten_hang\": t√™n h√†ng h√≥a (gh√©p ƒë·ªß n·∫øu b·ªã chia d√≤ng),\n"
        "- \"ma_hang\": m√£ h√†ng (n·∫øu c√≥),\n"
        "- \"don_vi\": ƒë∆°n v·ªã t√≠nh (v√≠ d·ª•: chi·∫øc, b·ªô,...),\n"
        "- \"so_luong\": s·ªë l∆∞·ª£ng d·∫°ng s·ªë nguy√™n,\n"
        "- \"don_gia\": ƒë∆°n gi√° (kh√¥ng c√≥ ƒë∆°n v·ªã ti·ªÅn),\n"
        "- \"thanh_tien\": th√†nh ti·ªÅn (t√≠nh theo s·ªë l∆∞·ª£ng * ƒë∆°n gi√°),\n"
        "- \"ngay\": ng√†y giao d·ªãch (theo ƒë·ªãnh d·∫°ng dd/mm/yyyy).\n\n"
        "H√£y suy lu·∫≠n v√† chu·∫©n h√≥a n·∫øu th·∫•y d·ªØ li·ªáu b·ªã xu·ªëng d√≤ng sai ho·∫∑c r·ªëi lo·∫°n th·ª© t·ª±. "
        "Kh√¥ng tr·∫£ l·ªùi g√¨ ngo√†i ƒëo·∫°n JSON duy nh·∫•t. Kh√¥ng c√≥ b·∫•t k·ª≥ m√¥ t·∫£, l·ªùi gi·∫£i th√≠ch, d·∫•u ``` hay vƒÉn b·∫£n ph·ª• n√†o ngo√†i m·∫£ng JSON.\n\n"
        "V√≠ d·ª•:\n"
        "[\n"
        "  {\n"
        "    \"ten_hang\": \"Chu·ªôt kh√¥ng d√¢y\",\n"
        "    \"ma_hang\": \"M001\",\n"
        "    \"don_vi\": \"Chi·∫øc\",\n"
        "    \"so_luong\": 2,\n"
        "    \"don_gia\": 150000,\n"
        "    \"thanh_tien\": 300000,\n"
        "    \"ngay\": \"21/07/2025\"\n"
        "  },\n"
        "  ...\n"
        "]"
    )


    try:
        # G·ªçi LLM m√† kh√¥ng √©p ki·ªÉu output
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": ocr_text}
            ],
            temperature=0.2
        )

        content = response.choices[0].message.content.strip()

        # T·ª± t√¨m ƒëo·∫°n JSON trong n·ªôi dung tr·∫£ v·ªÅ
        start = content.find("[")
        end = content.rfind("]") + 1
        json_text = content[start:end]

        # In ƒëo·∫°n JSON raw (debug)
        print("\n[üîç JSON Extracted Raw]:\n", json_text)

        # Parse JSON
        return json.loads(json_text)

    except json.JSONDecodeError:
        print("[‚ö†] Kh√¥ng parse ƒë∆∞·ª£c JSON t·ª´ k·∫øt qu·∫£ LLM.")
        return None

    except Exception as e:
        print(f"[‚ùå] L·ªói khi g·ªçi LLM ho·∫∑c x·ª≠ l√Ω k·∫øt qu·∫£: {e}")
        return None
